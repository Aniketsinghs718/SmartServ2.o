import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Calendar, Clock, MapPin, Plus, Phone, Edit, ChevronRight, AlertCircle, CheckCircle, Loader, MinusCircle, PlusCircle, Zap } from 'lucide-react';
import { useCart } from '../context/CartContext';
import { useAuth } from '../context/AuthContext';
import { useAuthStore } from '../stores/authStore';
import { useBookings } from '../context/BookingContext';
import AddressForm from '../components/AddressForm';
import { Address } from '../types';
import { supabase } from '../lib/supabase';

const CheckoutPage: React.FC = () => {
  const navigate = useNavigate();
  const { items, getTotalPrice, clearCart } = useCart();
  const { user, isAuthenticated } = useAuth();
  const { user: supabaseUser, profile } = useAuthStore();
  const { addBooking } = useBookings();
  
  const [selectedDate, setSelectedDate] = useState<string>('');
  const [selectedTime, setSelectedTime] = useState<string>('');
  const [selectedAddress, setSelectedAddress] = useState<string>('');
  const [showAddressForm, setShowAddressForm] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [isLoading, setIsLoading] = useState(false);
  const [addresses, setAddresses] = useState<Address[]>([]);
  const [pageLoading, setPageLoading] = useState(true);
  const [paymentMethod, setPaymentMethod] = useState<string>('online');
  const [tipAmount, setTipAmount] = useState<number>(0);
  const [selectedTip, setSelectedTip] = useState<string>('');
  const [customTip, setCustomTip] = useState<string>('');
  const [isDetectingLocation, setIsDetectingLocation] = useState(false);
  const [addressesLoading, setAddressesLoading] = useState(true);
  const [isInstantBooking, setIsInstantBooking] = useState(false);
  const [generateUniqueCode, setGenerateUniqueCode] = useState(false);
  const [uniqueCode, setUniqueCode] = useState<string>('');

  // Generate available dates (next 7 days)
  const availableDates = Array.from({ length: 14 }, (_, i) => {
    const date = new Date();
    date.setDate(date.getDate() + i);
    return date.toISOString().split('T')[0];
  });

  // Generate available time slots
  const availableTimeSlots = [
    '09:00 AM - 11:00 AM',
    '11:00 AM - 01:00 PM',
    '01:00 PM - 03:00 PM',
    '03:00 PM - 05:00 PM',
    '05:00 PM - 07:00 PM',
    '07:00 PM - 09:00 PM'
  ];

  // Enhanced time slot and date selection handlers
  const handleTimeSelect = (time: string) => {
    console.log('Time selected:', time);
    setSelectedTime(time);
    
    // Clear time-related errors
    if (errors.time) {
      setErrors(prev => ({...prev, time: ''}));
    }
    
    // Also save to localStorage for persistence
    localStorage.setItem('selectedTime', time);
  };

  const handleDateSelect = (date: string) => {
    console.log('Date selected:', date);
    setSelectedDate(date);
    
    // Clear date-related errors
    if (errors.date) {
      setErrors(prev => ({...prev, date: ''}));
    }
    
    // Also save to localStorage for persistence
    localStorage.setItem('selectedDate', date);
  };

  // Generate random unique code for instant booking
  useEffect(() => {
    if (generateUniqueCode) {
      const generateCode = () => {
        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
        let result = '';
        for (let i = 0; i < 6; i++) {
          result += characters.charAt(Math.floor(Math.random() * characters.length));
        }
        return result;
      };
      
      setUniqueCode(generateCode());
      setGenerateUniqueCode(false);
    }
  }, [generateUniqueCode]);

  // Check authentication status
  useEffect(() => {
    const checkAuth = async () => {
      try {
        setPageLoading(true);
        // Check Supabase session
        const { data: session } = await supabase.auth.getSession();
        const hasSupabaseAuth = !!session?.session?.user;
        
        // If neither authentication method is available, redirect to login
        if (!isAuthenticated && !hasSupabaseAuth) {
          navigate('/login', { state: { from: '/checkout' } });
        }
      } catch (error) {
        console.error("Error checking authentication:", error);
        // If there's an error checking Supabase auth, fall back to context auth
        if (!isAuthenticated) {
          navigate('/login', { state: { from: '/checkout' } });
        }
      } finally {
        setPageLoading(false); // Ensure pageLoading is always set to false
      }
    };
    
    checkAuth();
  }, [isAuthenticated, supabaseUser, navigate]);

  // Redirect if cart is empty
  useEffect(() => {
    if (items.length === 0) {
      navigate('/cart');
    }
  }, [items, navigate]);

  // Load addresses
  useEffect(() => {
    const loadAddresses = async () => {
      try {
        setAddressesLoading(true);
        
        // First, try sessionStorage for the latest address (most reliable fallback)
        const latestAddressJson = sessionStorage.getItem('latestAddress');
        if (latestAddressJson) {
          try {
            const latestAddress = JSON.parse(latestAddressJson);
            const exists = addresses.some(addr => addr.id === latestAddress.id);
            if (!exists) {
              const updatedAddresses = [...addresses, latestAddress];
              setAddresses(updatedAddresses);
              setSelectedAddress(latestAddress.id);
            } else {
              setSelectedAddress(latestAddress.id);
            }
            
            console.log('Address loaded from sessionStorage');
          } catch (e) {
            console.log('Error parsing latest address from sessionStorage', e);
          }
        }
        
        // Next, try regular localStorage
        try {
          const storedAddresses = localStorage.getItem('userAddresses');
          if (storedAddresses) {
            const parsedAddresses = JSON.parse(storedAddresses);
            if (parsedAddresses && parsedAddresses.length > 0) {
              // Only replace addresses if we found more in localStorage than we currently have
              if (!addresses.length || addresses.length < parsedAddresses.length) {
                setAddresses(parsedAddresses);
                if (!selectedAddress) {
                  setSelectedAddress(parsedAddresses[0].id);
                }
                console.log('Addresses loaded from localStorage');
              }
            }
          }
        } catch (e) {
          console.log('Error loading addresses from localStorage', e);
        }
        
        // Check for user context addresses
        if (user?.addresses && user.addresses.length > 0) {
          if (!addresses.length || addresses.length < user.addresses.length) {
            setAddresses(user.addresses);
            if (!selectedAddress && user.addresses.length > 0) {
              setSelectedAddress(user.addresses[0].id);
            }
            console.log('Addresses loaded from user context');
          }
        }
        
        // Finally try Supabase as a last option (since we know it's failing)
        const { data: session } = await supabase.auth.getSession();
        
        if (session?.session?.user) {
          try {
            const { data, error } = await supabase
              .from('addresses')
              .select('*')
              .eq('user_id', session.session.user.id);
              
            if (error) {
              console.log('Error loading addresses from Supabase:', error.message);
            } else if (data && data.length > 0) {
              const mappedAddresses = data.map(addr => ({
                id: addr.id,
                type: addr.type || 'Home',
                address: addr.address,
                city: addr.city,
                pincode: addr.pincode
              }));
              setAddresses(mappedAddresses);
              
              if (!selectedAddress) {
                setSelectedAddress(mappedAddresses[0].id);
              }
              console.log('Addresses loaded from Supabase');
            }
          } catch (supabaseError) {
            console.log('Error in Supabase request:', supabaseError);
          }
        }
      } catch (err) {
        console.error('Error loading addresses:', err);
      } finally {
        setAddressesLoading(false);
      }
    };
    
    loadAddresses();
  }, [user, selectedAddress, addresses.length]);

  // Auto-select the first date and time slot if none is selected
  useEffect(() => {
    // Try to load from localStorage first
    const savedDate = localStorage.getItem('selectedDate');
    const savedTime = localStorage.getItem('selectedTime');
    
    if (savedDate && !selectedDate) {
      // Check if the saved date is still valid (not in the past)
      const today = new Date().toISOString().split('T')[0];
      if (savedDate >= today) {
        setSelectedDate(savedDate);
        console.log('Restored saved date from localStorage:', savedDate);
      }
    } else if (!selectedDate && availableDates.length > 0) {
      setSelectedDate(availableDates[0]);
      localStorage.setItem('selectedDate', availableDates[0]);
      console.log('Set default date:', availableDates[0]);
    }
    
    if (savedTime && !selectedTime) {
      setSelectedTime(savedTime);
      console.log('Restored saved time from localStorage:', savedTime);
    } else if (!selectedTime && availableTimeSlots.length > 0) {
      setSelectedTime(availableTimeSlots[0]);
      localStorage.setItem('selectedTime', availableTimeSlots[0]);
      console.log('Set default time:', availableTimeSlots[0]);
    }
  }, [selectedDate, selectedTime, availableDates, availableTimeSlots]);

  const validate = () => {
    const newErrors: Record<string, string> = {};
    
    if (!selectedDate) {
      newErrors.date = 'Please select a date';
    }
    
    if (!selectedTime) {
      newErrors.time = 'Please select a time slot';
    }
    
    if (!selectedAddress) {
      newErrors.address = 'Please select an address';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleAddressAdded = async () => {
    setShowAddressForm(false);
    setAddressesLoading(true);
    
    try {
      // First try to get the latest address from sessionStorage
      const latestAddressJson = sessionStorage.getItem('latestAddress');
      if (latestAddressJson) {
        try {
          const latestAddress = JSON.parse(latestAddressJson);
          
          // Add to existing addresses if not already there
          const exists = addresses.some(addr => addr.id === latestAddress.id);
          if (!exists) {
            const updatedAddresses = [...addresses, latestAddress];
            setAddresses(updatedAddresses);
            setSelectedAddress(latestAddress.id);
          } else {
            // If it already exists, make sure it's selected
            setSelectedAddress(latestAddress.id);
          }
          
          // We found the address in sessionStorage, so we're done
          setAddressesLoading(false);
          return;
        } catch (parseError) {
          console.log('Error parsing latest address from sessionStorage');
        }
      }
      
      // Try to load from Supabase if the sessionStorage approach failed
      const { data: session } = await supabase.auth.getSession();
      
      if (session?.session?.user) {
        try {
          const { data, error } = await supabase
            .from('addresses')
            .select('*')
            .eq('user_id', session.session.user.id);
            
          if (!error && data) {
            const mappedAddresses = data.map(addr => ({
              id: addr.id,
              type: addr.type || 'Home',
              address: addr.address,
              city: addr.city,
              pincode: addr.pincode
            }));
            setAddresses(mappedAddresses);
            
            // Auto-select the newly added address (should be the last one)
            if (mappedAddresses.length > 0) {
              setSelectedAddress(mappedAddresses[mappedAddresses.length - 1].id);
            }
          }
        } catch (supabaseError) {
          console.log('Supabase error loading addresses, checking local storage');
        }
      }
      
      // If we made it here, check if user context has addresses
      if (user?.addresses) {
        setAddresses(user.addresses);
        
        // Auto-select the newly added address (should be the last one)
        if (user.addresses.length > 0) {
          setSelectedAddress(user.addresses[user.addresses.length - 1].id);
        }
      }
      
      // Finally, check direct localStorage as a last resort
      try {
        const storedAddresses = localStorage.getItem('userAddresses');
        if (storedAddresses) {
          const parsedAddresses = JSON.parse(storedAddresses);
          if (parsedAddresses.length > 0 && (!addresses.length || addresses.length < parsedAddresses.length)) {
            setAddresses(parsedAddresses);
            setSelectedAddress(parsedAddresses[parsedAddresses.length - 1].id);
          }
        }
      } catch (localStorageError) {
        console.log('Error loading addresses from localStorage');
      }
    } catch (error) {
      console.log('Error in handleAddressAdded:', error);
    } finally {
      setAddressesLoading(false);
    }
  };

  const detectLocation = () => {
    setIsDetectingLocation(true);
    
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        async (position) => {
          try {
            // Get the coordinates
            const { latitude, longitude } = position.coords;
            
            // Use geocoding API to get address details
            const response = await fetch(
              `https://geocode.maps.co/reverse?lat=${latitude}&lon=${longitude}&api_key=67e2852867f22430310666byi5cebbf`
            );
            
            if (!response.ok) {
              throw new Error('Failed to fetch address from coordinates');
            }
            
            const data = await response.json();
            
            if (data && data.address) {
              // Extract relevant address components
              const street = data.address.road || '';
              const houseNumber = data.address.house_number || '';
              const fullStreet = houseNumber ? `${houseNumber} ${street}` : street;
              const addressLine = data.address.neighbourhood || data.address.suburb || '';
              const city = data.address.city || data.address.town || data.address.state_district || '';
              const pincode = data.address.postcode || '';
              
              // Construct full address
              const fullAddress = fullStreet + (addressLine ? `, ${addressLine}` : '');
              
              // Show address form with pre-filled data
              setShowAddressForm(true);
              
              // We'll set some session storage that AddressForm will pick up
              const tempAddress = {
                id: `temp-${Date.now()}`,
                type: 'Home',
                address: fullAddress || '',
                city: city || '',
                pincode: pincode || '',
                latitude: latitude,
                longitude: longitude
              };
              
              // Store in session storage for AddressForm to use
              sessionStorage.setItem('tempDetectedAddress', JSON.stringify(tempAddress));
              
              setIsDetectingLocation(false);
            } else {
              throw new Error('No address data found');
            }
          } catch (error) {
            setIsDetectingLocation(false);
            console.error("Error getting address from coordinates:", error);
            alert("Could not determine your address from location. Please enter it manually.");
          }
        },
        (error) => {
          setIsDetectingLocation(false);
          console.error("Geolocation error:", error);
          alert("Could not access your location. Please ensure location services are enabled or enter your address manually.");
        }
      );
    } else {
      setIsDetectingLocation(false);
      alert("Geolocation is not supported by your browser. Please enter your address manually.");
    }
  };

  const handleTipSelection = (amount: string) => {
    setSelectedTip(amount);
    if (amount === 'custom') {
      setTipAmount(parseInt(customTip) || 0);
    } else {
      setTipAmount(parseInt(amount) || 0);
    }
  };

  const handleCustomTipChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value.replace(/[^0-9]/g, '');
    setCustomTip(value);
    if (selectedTip === 'custom') {
      setTipAmount(parseInt(value) || 0);
    }
  };

  // Handle instant booking toggle
  const handleInstantBookingToggle = () => {
    setIsInstantBooking(!isInstantBooking);
    if (!isInstantBooking && !uniqueCode) {
      setGenerateUniqueCode(true);
    }
  };

  const handlePlaceOrder = async () => {
    // For instant bookings, set date to today and time to the next available slot
    if (isInstantBooking) {
      const today = new Date().toISOString().split('T')[0];
      setSelectedDate(today);
      
      // Set the time to next available slot based on current time
      const currentHour = new Date().getHours();
      let selectedTimeSlot = availableTimeSlots[0]; // Default to first slot
      
      if (currentHour < 9) {
        selectedTimeSlot = availableTimeSlots[0]; // 9-11 AM
      } else if (currentHour < 11) {
        selectedTimeSlot = availableTimeSlots[1]; // 11-1 PM
      } else if (currentHour < 13) {
        selectedTimeSlot = availableTimeSlots[2]; // 1-3 PM
      } else if (currentHour < 15) {
        selectedTimeSlot = availableTimeSlots[3]; // 3-5 PM
      } else if (currentHour < 17) {
        selectedTimeSlot = availableTimeSlots[4]; // 5-7 PM
      } else if (currentHour < 19) {
        selectedTimeSlot = availableTimeSlots[5]; // 7-9 PM
      } else {
        // After 7 PM, book for tomorrow's first slot
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);
        setSelectedDate(tomorrow.toISOString().split('T')[0]);
        selectedTimeSlot = availableTimeSlots[0];
      }
      
      setSelectedTime(selectedTimeSlot);
    }
    
    if (!validate()) {
      return;
    }
    
    if (!user && !supabaseUser) {
      setErrors({ general: 'You must be logged in to place an order' });
      return;
    }
    
    setIsLoading(true);
    
    try {
      // Get the current user ID (either from Supabase or local storage)
      const userId = supabaseUser?.id || user?.id;
      
      if (!userId) {
        throw new Error('User ID not found');
      }
    
      // Create a booking for each item in the cart
      for (const item of items) {
        const bookingStatus = isInstantBooking ? ('confirmed' as const) : ('pending' as const);
        
        const booking = {
          userId: userId,
          serviceId: item.service.id,
          providerId: item.service.providerId || '1', // Use providerId from service if available, otherwise default
          date: selectedDate,
          time: selectedTime,
          status: bookingStatus,
          addressId: selectedAddress,
          price: item.service.price * item.quantity,
          tipAmount: tipAmount,
          paymentMethod: paymentMethod,
          isInstantBooking: isInstantBooking,
          uniqueCode: isInstantBooking ? uniqueCode : undefined
        };
        
        // Try to create booking in Supabase if available
        try {
          const { data: session } = await supabase.auth.getSession();
          
          if (session?.session?.user) {
            const { error } = await supabase
              .from('bookings')
              .insert({
                user_id: session.session.user.id,
                service_id: item.service.id,
                provider_id: item.service.providerId || '1',
                booking_date: selectedDate,
                booking_time: selectedTime,
                status: isInstantBooking ? 'confirmed' : 'pending',
                address_id: selectedAddress,
                price: item.service.price * item.quantity,
                tip_amount: tipAmount,
                payment_method: paymentMethod,
                is_instant_booking: isInstantBooking,
                unique_code: isInstantBooking ? uniqueCode : null
              });
              
            if (error) {
              console.error('Error creating booking in Supabase:', error);
              // Fall back to local storage if Supabase fails
              addBooking(booking);
            }
          } else {
            // Fall back to local storage if no Supabase session
            addBooking(booking);
          }
        } catch (error) {
          console.error('Error with Supabase booking:', error);
          // Fall back to local storage
          addBooking(booking);
        }
      }
    
      // Clear the cart
      clearCart();
      
      // Redirect to bookings page with success message
      navigate('/bookings', { state: { success: true } });
    } catch (error) {
      console.error('Error creating bookings:', error);
      setErrors({ general: 'Failed to create bookings. Please try again.' });
    } finally {
      setIsLoading(false);
    }
  };

  if (pageLoading) {
    return (
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 flex justify-center items-center min-h-screen">
        <Loader size={32} className="animate-spin text-blue-600 mr-2" />
        <span className="text-xl text-gray-700">Loading checkout...</span>
      </div>
    );
  }

  // Get selected address details
  const selectedAddressObj = addresses.find(addr => addr.id === selectedAddress);

  // Calculate price details
  const subtotal = getTotalPrice();
  const serviceFee = 49;
  const taxes = Math.round(subtotal * 0.09); // 9% tax
  const totalAmount = subtotal + serviceFee + taxes + tipAmount;

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <h1 className="text-2xl font-bold text-gray-900 mb-6">Checkout</h1>
      
      {errors.general && (
        <div className="mb-6 bg-red-50 border-l-4 border-red-500 text-red-700 p-4 rounded-md flex items-center">
          <AlertCircle size={20} className="mr-2 flex-shrink-0" />
          <span>{errors.general}</span>
        </div>
      )}
      
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2">
          {/* Booking Details */}
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden mb-6">
            <div className="p-4 border-b border-gray-200">
              <h2 className="font-medium text-gray-800 flex items-center">
                <Phone size={18} className="mr-2" />
                Send booking details to
              </h2>
            </div>
            <div className="p-4">
              <p className="text-gray-700">
                {user?.phone || profile?.phone || '+91 XXXXXXXXXX'}
              </p>
            </div>
          </div>
          
          {/* Address */}
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden mb-6">
            <div className="p-4 border-b border-gray-200">
              <h2 className="font-medium text-gray-800 flex items-center">
                <MapPin size={18} className="mr-2" />
                  Address
                </h2>
            </div>
            
            <div className="p-4">
              {showAddressForm ? (
                <AddressForm onAddressAdded={handleAddressAdded} />
              ) : (
                <>
                  {addresses.length === 0 ? (
                    <div className="text-center py-4">
                      <p className="text-gray-600 mb-4">You don't have any saved addresses.</p>
                      <div className="flex justify-center space-x-2">
                        <button
                          onClick={detectLocation}
                          className="px-4 py-2 bg-gray-100 text-gray-800 rounded-md hover:bg-gray-200 flex items-center"
                          disabled={isDetectingLocation}
                        >
                          {isDetectingLocation ? (
                            <>
                              <Loader size={16} className="animate-spin mr-2" />
                              Detecting...
                            </>
                          ) : (
                            <>
                              <MapPin size={16} className="mr-2" />
                              Use Current Location
                            </>
                          )}
                        </button>
                      <button
                        onClick={() => setShowAddressForm(true)}
                        className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                      >
                        Add New Address
                      </button>
                      </div>
                    </div>
                  ) : (
                    <div className="space-y-1">
                      <div className="flex justify-between items-start">
                            <div>
                          <p className="font-medium text-gray-800">
                            {selectedAddressObj ? `${selectedAddressObj.type} - ${selectedAddressObj.address}` : 'No address selected'}
                          </p>
                          {selectedAddressObj && (
                            <p className="text-gray-600 text-sm">
                              {selectedAddressObj.city}, {selectedAddressObj.pincode}
                            </p>
                          )}
                        </div>
                        <button
                          onClick={() => setShowAddressForm(true)}
                          className="px-3 py-1 text-sm bg-gray-100 text-gray-700 rounded hover:bg-gray-200 flex items-center"
                        >
                          <Edit size={14} className="mr-1" />
                          Edit
                        </button>
                      </div>
                      
                      {errors.address && <p className="text-sm text-red-600">{errors.address}</p>}
                    </div>
                  )}
                </>
              )}
            </div>
          </div>
          
          {/* Instant Booking Option */}
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden mb-6">
            <div className="p-4 border-b border-gray-200">
              <h2 className="font-medium text-gray-800 flex items-center">
                <Zap size={18} className="mr-2 text-yellow-500" />
                Instant Booking
              </h2>
            </div>
            
            <div className="p-4">
              <div className="flex items-center justify-between mb-4">
                <div>
                  <p className="font-medium text-gray-800">Get service ASAP</p>
                  <p className="text-sm text-gray-600">Book the next available slot today</p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input 
                    type="checkbox" 
                    className="sr-only peer" 
                    checked={isInstantBooking}
                    onChange={handleInstantBookingToggle}
                  />
                  <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                </label>
              </div>
              
              {isInstantBooking && (
                <div className="bg-blue-50 rounded-md p-4 border border-blue-100">
                  <div className="flex items-start">
                    <CheckCircle size={18} className="text-blue-600 mt-1 mr-2 flex-shrink-0" />
                    <div>
                      <p className="text-blue-800 font-medium">Instant booking enabled</p>
                      <p className="text-sm text-blue-700 mt-1">Your service will be scheduled for the earliest available slot today.</p>
                      {uniqueCode && (
                        <div className="mt-2">
                          <p className="text-xs text-blue-700 mb-1">Your unique booking code:</p>
                          <div className="bg-white border border-blue-200 rounded p-2 font-mono text-center font-medium text-blue-900">
                            {uniqueCode}
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
          
          {/* Time Slot */}
          <div className={`bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden mb-6 ${isInstantBooking ? 'opacity-50 pointer-events-none' : ''}`}>
            <div className="p-4 border-b border-gray-200">
              <h2 className="font-medium text-gray-800 flex items-center">
                <Clock size={18} className="mr-2" />
                Slot
                {isInstantBooking && <span className="ml-2 text-xs text-gray-500">(Disabled for instant bookings)</span>}
              </h2>
            </div>
            
            <div className="p-4">
              {!selectedDate || !selectedTime ? (
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Date</label>
                    <div className="grid grid-cols-3 sm:grid-cols-4 gap-2">
                      {availableDates.slice(0, 7).map((date) => (
                        <button
                          key={date}
                          type="button"
                          className={`py-2 px-3 rounded-md border text-sm transition-all duration-200 ${
                            selectedDate === date
                              ? 'border-blue-500 bg-blue-50 text-blue-700 font-medium shadow-sm'
                              : 'border-gray-300 hover:border-gray-400 hover:bg-gray-50'
                          }`}
                          onClick={() => handleDateSelect(date)}
                        >
                          {new Date(date).toLocaleDateString('en-US', {
                            weekday: 'short',
                            day: 'numeric',
                            month: 'short'
                          })}
                        </button>
                      ))}
                    </div>
                    {errors.date && <p className="mt-1 text-sm text-red-600">{errors.date}</p>}
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Time</label>
                    <div className="grid grid-cols-2 sm:grid-cols-3 gap-2">
                      {availableTimeSlots.map((time) => (
                        <button
                          key={time}
                          type="button"
                          className={`py-2 px-3 rounded-md border text-sm transition-all duration-200 ${
                            selectedTime === time
                              ? 'border-blue-500 bg-blue-50 text-blue-700 font-medium shadow-sm'
                              : 'border-gray-300 hover:border-gray-400 hover:bg-gray-50'
                          }`}
                          onClick={() => handleTimeSelect(time)}
                        >
                          {time}
                        </button>
                      ))}
                    </div>
                    {errors.time && <p className="mt-1 text-sm text-red-600">{errors.time}</p>}
                  </div>
                </div>
              ) : (
                <div className="flex justify-between items-center">
                  <div>
                    <p className="font-medium text-gray-800">
                      {new Date(selectedDate).toLocaleDateString('en-US', {
                        weekday: 'short',
                        month: 'short',
                        day: 'numeric'
                      })}
                    </p>
                    <p className="text-gray-600 text-sm">{selectedTime}</p>
                  </div>
                  <button
                    onClick={() => {
                      setSelectedDate('');
                      setSelectedTime('');
                    }}
                    className="px-3 py-1 text-sm bg-gray-100 text-gray-700 rounded hover:bg-gray-200 flex items-center"
                  >
                    <Edit size={14} className="mr-1" />
                    Change
                  </button>
                </div>
              )}
            </div>
          </div>
          
          {/* Payment Method */}
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden mb-6">
            <div className="p-4 border-b border-gray-200">
              <h2 className="font-medium text-gray-800">Payment Method</h2>
            </div>
            
            <div className="p-4">
              <div className="space-y-3">
                <label className="flex items-center space-x-3 cursor-pointer">
                  <input
                    type="radio"
                    name="paymentMethod"
                    value="online"
                    checked={paymentMethod === 'online'}
                    onChange={() => setPaymentMethod('online')}
                    className="h-4 w-4 text-blue-600"
                  />
                  <span className="text-gray-700">Pay Online</span>
                </label>
                
                <label className="flex items-center space-x-3 cursor-pointer">
                  <input
                    type="radio"
                    name="paymentMethod"
                    value="cod"
                    checked={paymentMethod === 'cod'}
                    onChange={() => setPaymentMethod('cod')}
                    className="h-4 w-4 text-blue-600"
                  />
                  <span className="text-gray-700">Cash on Delivery</span>
                </label>
              </div>
            </div>
          </div>
          
          {/* Cancellation Policy */}
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden mb-6">
            <div className="p-4">
              <h2 className="font-medium text-gray-800 mb-2">Cancellation policy</h2>
              <p className="text-sm text-gray-600">
                Free cancellations if done more than 3 hrs before the service or if a professional isn't assigned.
                A fee will be charged otherwise.
              </p>
              <button className="mt-2 text-sm text-blue-600 hover:text-blue-800">Read full policy</button>
            </div>
          </div>
        </div>
        
        {/* Order Summary */}
        <div className="lg:col-span-1">
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 sticky top-20">
            <h2 className="text-xl font-semibold text-gray-800 mb-6">Payment summary</h2>
            
            <div className="space-y-4">
              <div className="flex justify-between">
                <p className="text-gray-600">Item total</p>
                <p className="text-gray-800 font-medium">₹{subtotal}</p>
              </div>
              
              <div className="flex justify-between">
                <p className="text-gray-600">Visitation Fee</p>
                <p className="text-gray-800 font-medium">₹{serviceFee}</p>
              </div>
              
              <div className="flex justify-between">
                <p className="text-gray-600">Taxes and Fee</p>
                <p className="text-gray-800 font-medium">₹{taxes}</p>
              </div>

              {isInstantBooking && (
                <div className="flex justify-between">
                  <p className="text-gray-600">Instant Booking Fee</p>
                  <p className="text-gray-800 font-medium">₹99</p>
                </div>
              )}
              
              {tipAmount > 0 && (
                <div className="flex justify-between">
                  <p className="text-gray-600">Tip Amount</p>
                  <p className="text-gray-800 font-medium">₹{tipAmount}</p>
                </div>
              )}
              
              <div className="border-t border-gray-200 pt-4 flex justify-between">
                <p className="text-lg font-semibold text-gray-800">Total amount</p>
                <p className="text-lg font-bold text-gray-900">₹{totalAmount + (isInstantBooking ? 99 : 0)}</p>
              </div>
              
              <div className="border-t border-gray-200 pt-4 flex justify-between">
                <p className="text-lg font-semibold text-gray-800">Amount to pay</p>
                <p className="text-lg font-bold text-gray-900">₹{totalAmount + (isInstantBooking ? 99 : 0)}</p>
              </div>
            </div>
            
            {/* Tip Section */}
            <div className="mt-6">
              <h3 className="text-gray-700 font-medium mb-3">Add a tip to thank the Professional</h3>
              <div className="grid grid-cols-3 gap-2 mb-3">
                <button
                  className={`py-2 px-3 rounded-md border ${selectedTip === '50' ? 'border-blue-500 bg-blue-50' : 'border-gray-300'}`}
                  onClick={() => handleTipSelection('50')}
                >
                  ₹50
                </button>
                <button
                  className={`py-2 px-3 rounded-md border ${selectedTip === '75' ? 'border-blue-500 bg-blue-50' : 'border-gray-300'} relative`}
                  onClick={() => handleTipSelection('75')}
                >
                  ₹75
                  {selectedTip === '75' && (
                    <span className="absolute -bottom-1 left-0 right-0 text-xs text-green-600">POPULAR</span>
                  )}
                </button>
                <button
                  className={`py-2 px-3 rounded-md border ${selectedTip === '100' ? 'border-blue-500 bg-blue-50' : 'border-gray-300'}`}
                  onClick={() => handleTipSelection('100')}
                >
                  ₹100
                </button>
              </div>
              
              <div className={`flex items-center space-x-2 mb-6 ${selectedTip === 'custom' ? 'opacity-100' : 'opacity-70'}`}>
                <button
                  className={`py-2 px-3 rounded-md border ${selectedTip === 'custom' ? 'border-blue-500 bg-blue-50' : 'border-gray-300'}`}
                  onClick={() => handleTipSelection('custom')}
                >
                  Custom
                </button>
                {selectedTip === 'custom' && (
                  <div className="flex items-center">
                    <span className="mr-2">₹</span>
                    <input
                      type="text"
                      value={customTip}
                      onChange={handleCustomTipChange}
                      className="border border-gray-300 rounded-md p-2 w-20 text-center"
                      placeholder="Amount"
                      autoFocus
                    />
                  </div>
                )}
            </div>
            
            <button
              onClick={handlePlaceOrder}
              disabled={isLoading || addresses.length === 0 || (!isInstantBooking && (!selectedDate || !selectedTime))}
              className="w-full bg-blue-600 text-white py-3 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 flex justify-center items-center"
            >
              {isLoading ? (
                <>
                  <Loader size={18} className="animate-spin mr-2" />
                  Processing...
                </>
              ) : addresses.length === 0 ? 
                'Add an address to continue' : 
                !selectedDate || !selectedTime && !isInstantBooking ? 
                'Select date and time to continue' : 
                <>
                  {isInstantBooking && <Zap size={18} className="mr-2" />}
                  Pay ₹{totalAmount + (isInstantBooking ? 99 : 0)}
                </>
              }
            </button>
              
            <div className="mt-4 text-right">
              <button className="text-sm text-blue-600 hover:text-blue-800">View breakup</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CheckoutPage;